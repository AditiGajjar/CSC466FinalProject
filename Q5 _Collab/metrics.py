#CSC 466 Fall 2023 - Lab 5: Collaborative Filtering
#Soren Paetau, Othilia Norell and Nicholas Tan \\  spaetau@calpoly.edu / onorell@calpoly.edu / nktan@calpoly.edu

#HOW TO RUN: 
#python3 metrics.py

import numpy as np

"""
MAE
"""

#Hardcoded mae values from our runs of each method, the runs were repeated 30 times (hence 30 values in each list) and the sample size was 100
mae_values_1 = [
    4.1589833793621205, 4.2104037803859145, 3.7126330878134617, 4.812800862666331,
    4.027032212059818, 4.096846718899247, 4.424152689040933, 4.193237088357479,
    4.470502873806687, 4.146702217620238, 4.136796485555094, 4.776880077998221,
    4.261550112081613, 3.9985004781050573, 3.658083990120112, 4.648068907541164,
    4.22687639952985, 4.522994277395048, 4.037469582939373, 3.9385341650847763,
    4.113182738949753, 3.835513213500468, 4.259875033901952, 4.206740995976049,
    4.125324387680783, 3.4008461474415155, 3.6028680433034936, 3.7415494652116577,
    3.84452530678784, 4.3785789843009475
]
mae_values_2 = [
    3.8476000000000012, 4.5283999999999995, 4.0188999999999995, 3.5245999999999986,
    3.8814000000000006, 3.9951000000000016, 3.952200000000002, 3.714799999999999,
    3.8054000000000006, 3.642499999999998, 4.0665999999999976, 3.4574000000000003,
    3.9246000000000016, 4.3824000000000005, 4.699000000000001, 3.968899999999999,
    3.9928000000000003, 4.279100000000001, 3.3956999999999993, 4.2696,
    4.370699999999999, 3.565999999999999, 3.7518000000000002, 3.7748000000000004,
    3.7300000000000004, 3.8426, 3.641400000000001, 3.7055000000000002,
    4.696900000000001, 4.047199999999998
]
mae_values_3 = [
    2.986300000000002, 3.745499999999998, 3.0866999999999996, 3.0561000000000025,
    3.513099999999999, 3.2101000000000006, 3.7968000000000006, 3.2025999999999994,
    3.054600000000002, 3.5144999999999995, 3.3206000000000007, 3.7911,
    3.5208000000000017, 3.0789, 3.733800000000001, 3.5989, 3.62,
    3.011000000000001, 3.2813000000000017, 3.704799999999999, 3.4795,
    3.4461999999999993, 3.8421999999999987, 3.5502, 3.1371999999999995,
    3.1218999999999992, 3.6128000000000005, 3.346799999999999, 3.1595,
    3.118299999999999
]
mae_values_4 = [3.8, 3.7, 3.8, 3.6, 3.4, 3.3, 3.4, 3.7, 4.1, 4.2, 3.8, 4.2, 3.2, 3.7, 3.2, 3.7, 3.5, 3.5, 4.0, 3.3, 3.4, 3.8, 3.9, 3.9, 3.3, 3.5, 3.9, 3.4, 3.7, 3.5]

mae_values_5 = [
    3.6125, 3.2613, 3.8841, 3.2657, 2.9892, 3.5135, 3.6872, 3.3272,
    3.7147, 3.1493, 3.7256, 3.4866, 3.5244, 3.148, 3.999, 3.2727,
    3.3567, 3.4337, 3.1304, 3.234, 3.429, 3.6561, 3.6241, 3.8312,
    3.4005, 3.8291, 3.279, 3.3896, 3.2502, 3.18
]

"""
Calculating the standard deviation across all MAE values
"""
std_dev_1 = np.std(mae_values_1)
std_dev_2 = np.std(mae_values_2)
std_dev_3 = np.std(mae_values_3)
std_dev_4 = np.std(mae_values_4)
std_dev_5 = np.std(mae_values_5)

"""
Calculating the mean across all MAE values
"""
mean_1 = np.mean(mae_values_1)
mean_2 = np.mean(mae_values_2)
mean_3 = np.mean(mae_values_3)
mean_4 = np.mean(mae_values_4)
mean_5 = np.mean(mae_values_5)


print("Standard Deviation 1:", std_dev_1, "Mean 1:", mean_1)
print("Standard Deviation 2:", std_dev_2, "Mean 2:", mean_2)
print("Standard Deviation 3:", std_dev_3, "Mean 3:", mean_3)
print("Standard Deviation 4:", std_dev_4, "Mean 4:", mean_4)
print("Standard Deviation 5:", std_dev_5, "Mean 5:", mean_5)
print("______________________________________________________")


"""
ACCURACY
"""
acc_1 = [
    0.79, 0.76, 0.73, 0.73, 0.67, 0.71, 0.73, 0.77,
    0.69, 0.82, 0.76, 0.75, 0.72, 0.73, 0.77, 0.67,
    0.82, 0.77, 0.76, 0.68, 0.73, 0.76, 0.76, 0.73,
    0.72, 0.81, 0.77, 0.77, 0.81, 0.77
]

acc_2 = [
    0.73, 0.73, 0.75, 0.78, 0.78, 0.72, 0.74, 0.72,
    0.68, 0.66, 0.73, 0.8, 0.77, 0.71, 0.79, 0.8,
    0.77, 0.71, 0.84, 0.74, 0.76, 0.78, 0.8, 0.8,
    0.75, 0.74, 0.82, 0.79, 0.69, 0.77
]

acc_3 = [
    0.75, 0.78, 0.76, 0.74, 0.82, 0.78, 0.63, 0.69,
    0.79, 0.74, 0.82, 0.76, 0.8, 0.79, 0.83, 0.8,
    0.76, 0.77, 0.75, 0.73, 0.67, 0.78, 0.64, 0.81,
    0.72, 0.77, 0.72, 0.78, 0.79, 0.84
]

acc_4 = [
    0.73, 0.77, 0.74, 0.84, 0.74,
    0.76, 0.82, 0.77, 0.74, 0.74, 
    0.74, 0.70, 0.81, 0.75, 0.81, 
    0.75, 0.77, 0.77, 0.69, 0.78,
    0.76, 0.77, 0.74, 0.80, 0.82, 
    0.80, 0.72, 0.77, 0.63, 0.83
]

acc_5 = [
    0.76, 0.82, 0.68, 0.81, 0.82, 0.7, 0.81, 0.79,
    0.81, 0.85, 0.73, 0.81, 0.83, 0.79, 0.71, 0.69,
    0.83, 0.78, 0.8, 0.8, 0.77, 0.78, 0.72, 0.69,
    0.75, 0.64, 0.76, 0.81, 0.78, 0.72
]


"""
Calculating the avarage accuracy across all accuracy values for each method
"""
avg_acc_1= np.average(acc_1)
avg_acc_2 = np.average(acc_2)
avg_acc_3 = np.average(acc_3)
avg_acc_4 = np.average(acc_4)
avg_acc_5 = np.average(acc_5)



print("Average accuracy 1:", avg_acc_1)
print("Average accuracy 2:", avg_acc_2)
print("Average accuracy 3:", avg_acc_3)
print("Average accuracy 4:", avg_acc_4)
print("Average accuracy 5:", avg_acc_5)
print("\n")
